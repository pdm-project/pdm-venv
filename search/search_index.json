{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pdm-venv # A plugin for pdm that enables virtualenv management Project Deprecation # venv support will be integrated into the pdm after 2.0.0 . This project is not necessary and won't be maintained anymore. The last version of PDM it supports is 1.15 . Requirements # pdm-venv requires Python>=3.7 Installation # On PDM 1.6.4+, you can install the plugin directly by: $ pdm plugin add pdm-venv If pdm is installed via pipx (the recommended way), run: $ pipx inject pdm pdm-venv Otherwise if pdm is installed via Homebrew, run: $ $( brew --prefix pdm ) /libexec/bin/pip install pdm-venv Or install with pip to the user site: $ python -m pip install --user pdm-venv Note that pdm-venv must be installed to the same environment as pdm . Usage # pdm-venv enhances pdm 's CLI with the support of virtualenv creation and management. With pdm-venv installed, the default value of python.use_venv will turn to True , you can disable the whole plugin by pdm config python.use_venv false . Create a virtualenv # # Create a virtualenv based on 3.8 interpreter $ pdm venv create 3 .8 # Assign a different name other than the version string $ pdm venv create --name for -test 3 .8 # Use venv as the backend to create, support 3 backends: virtualenv(default), venv, conda $ pdm venv create --with venv 3 .9 List all virtualenv created with this project # $ pdm venv list Virtualenvs created with this project: - 3.8.6: C:\\Users\\Frost Ming\\AppData\\Local\\pdm\\pdm\\venvs\\test-project-8Sgn_62n-3.8.6 - for-test: C:\\Users\\Frost Ming\\AppData\\Local\\pdm\\pdm\\venvs\\test-project-8Sgn_62n-for-test - 3.9.1: C:\\Users\\Frost Ming\\AppData\\Local\\pdm\\pdm\\venvs\\test-project-8Sgn_62n-3.9.1 The name before the colon(:) is the key of the virtualenv which is used in remove and activate commands below. Remove a virtualenv # $ pdm venv remove for -test Virtualenvs created with this project: Will remove: C:\\Users\\Frost Ming\\AppData\\Local\\pdm\\pdm\\venvs\\test-project-8Sgn_62n-for-test, continue? [y/N]:y Removed C:\\Users\\Frost Ming\\AppData\\Local\\pdm\\pdm\\venvs\\test-project-8Sgn_62n-for-test Activate a virtualenv # Instead of spawning a subshell like what pipenv and poetry do, pdm-venv doesn't create the shell for you but print the activate command to the console. In this way you won't lose the fancy shell features. You can then feed the output to eval to activate the virtualenv without leaving the current shell: Bash/csh/zsh $ eval $( pdm venv activate for -test ) (test-project-8Sgn_62n-for-test) $ # Virtualenv entered Fish $ eval ( pdm venv activate for -test ) Powershell PS1> Invoke-Expression (pdm venv activate for-test) You can make your own shell shortcut function to avoid the input of long command. Here is an example of Bash: pdm_venv_activate () { eval $( 'pdm' 'venv' 'activate' \" $1 \" ) } Then you can activate it by pdm_venv_activate $venv_name and deactivate by deactivate directly. Additionally, if the saved Python interpreter is a venv Python, you can omit the name argument following activate . Switch Python interpreter # When pdm-venv is enabled, Python interpreters associated with the venvs will also show in the interpreter list of pdm use or pdm init command. Additionally, if pdm detects it is inside an active virtualenv by examining VIRTUAL_ENV env var, it will reuse that virtualenv for later actions. Virtualenv auto creation # If no Python interpreter is selected for the project, pdm-venv will take charge to create one for you and select the venv interpreter automatically, just like what pipenv and poetry do. Additionaly, if config item venv.in_project is True , pdm-venv will create the virtualenv in ${PROJECT_ROOT}/.venv . Configuration # Config Item Description Default Value Available in Project Env var venv.location The root directory to store virtualenvs appdirs.user_data_dir() / \"venvs\" No venv.backend The default backend used to create virtualenvs virtualenv No venv.in_project Create virtualenv in .venv under project root False Yes PDM_VENV_IN_PROJECT","title":"Overview"},{"location":"#pdm-venv","text":"A plugin for pdm that enables virtualenv management","title":"pdm-venv"},{"location":"#project-deprecation","text":"venv support will be integrated into the pdm after 2.0.0 . This project is not necessary and won't be maintained anymore. The last version of PDM it supports is 1.15 .","title":"Project Deprecation"},{"location":"#requirements","text":"pdm-venv requires Python>=3.7","title":"Requirements"},{"location":"#installation","text":"On PDM 1.6.4+, you can install the plugin directly by: $ pdm plugin add pdm-venv If pdm is installed via pipx (the recommended way), run: $ pipx inject pdm pdm-venv Otherwise if pdm is installed via Homebrew, run: $ $( brew --prefix pdm ) /libexec/bin/pip install pdm-venv Or install with pip to the user site: $ python -m pip install --user pdm-venv Note that pdm-venv must be installed to the same environment as pdm .","title":"Installation"},{"location":"#usage","text":"pdm-venv enhances pdm 's CLI with the support of virtualenv creation and management. With pdm-venv installed, the default value of python.use_venv will turn to True , you can disable the whole plugin by pdm config python.use_venv false .","title":"Usage"},{"location":"#create-a-virtualenv","text":"# Create a virtualenv based on 3.8 interpreter $ pdm venv create 3 .8 # Assign a different name other than the version string $ pdm venv create --name for -test 3 .8 # Use venv as the backend to create, support 3 backends: virtualenv(default), venv, conda $ pdm venv create --with venv 3 .9","title":"Create a virtualenv"},{"location":"#list-all-virtualenv-created-with-this-project","text":"$ pdm venv list Virtualenvs created with this project: - 3.8.6: C:\\Users\\Frost Ming\\AppData\\Local\\pdm\\pdm\\venvs\\test-project-8Sgn_62n-3.8.6 - for-test: C:\\Users\\Frost Ming\\AppData\\Local\\pdm\\pdm\\venvs\\test-project-8Sgn_62n-for-test - 3.9.1: C:\\Users\\Frost Ming\\AppData\\Local\\pdm\\pdm\\venvs\\test-project-8Sgn_62n-3.9.1 The name before the colon(:) is the key of the virtualenv which is used in remove and activate commands below.","title":"List all virtualenv created with this project"},{"location":"#remove-a-virtualenv","text":"$ pdm venv remove for -test Virtualenvs created with this project: Will remove: C:\\Users\\Frost Ming\\AppData\\Local\\pdm\\pdm\\venvs\\test-project-8Sgn_62n-for-test, continue? [y/N]:y Removed C:\\Users\\Frost Ming\\AppData\\Local\\pdm\\pdm\\venvs\\test-project-8Sgn_62n-for-test","title":"Remove a virtualenv"},{"location":"#activate-a-virtualenv","text":"Instead of spawning a subshell like what pipenv and poetry do, pdm-venv doesn't create the shell for you but print the activate command to the console. In this way you won't lose the fancy shell features. You can then feed the output to eval to activate the virtualenv without leaving the current shell: Bash/csh/zsh $ eval $( pdm venv activate for -test ) (test-project-8Sgn_62n-for-test) $ # Virtualenv entered Fish $ eval ( pdm venv activate for -test ) Powershell PS1> Invoke-Expression (pdm venv activate for-test) You can make your own shell shortcut function to avoid the input of long command. Here is an example of Bash: pdm_venv_activate () { eval $( 'pdm' 'venv' 'activate' \" $1 \" ) } Then you can activate it by pdm_venv_activate $venv_name and deactivate by deactivate directly. Additionally, if the saved Python interpreter is a venv Python, you can omit the name argument following activate .","title":"Activate a virtualenv"},{"location":"#switch-python-interpreter","text":"When pdm-venv is enabled, Python interpreters associated with the venvs will also show in the interpreter list of pdm use or pdm init command. Additionally, if pdm detects it is inside an active virtualenv by examining VIRTUAL_ENV env var, it will reuse that virtualenv for later actions.","title":"Switch Python interpreter"},{"location":"#virtualenv-auto-creation","text":"If no Python interpreter is selected for the project, pdm-venv will take charge to create one for you and select the venv interpreter automatically, just like what pipenv and poetry do. Additionaly, if config item venv.in_project is True , pdm-venv will create the virtualenv in ${PROJECT_ROOT}/.venv .","title":"Virtualenv auto creation"},{"location":"#configuration","text":"Config Item Description Default Value Available in Project Env var venv.location The root directory to store virtualenvs appdirs.user_data_dir() / \"venvs\" No venv.backend The default backend used to create virtualenvs virtualenv No venv.in_project Create virtualenv in .venv under project root False Yes PDM_VENV_IN_PROJECT","title":"Configuration"},{"location":"changelog/","text":"Changelog # v0.5.0 (2022-02-18) # Features & Improvements # Update the plugin to support PDM>=1.13.0. #35 v0.4.1 (2022-01-29) # Bug Fixes # Fix missing argument in the create command #32 v0.4.0 (2022-01-03) # Features & Improvements # Support creating venv in project with a config venv.in_project . #20 Add an option to purge created Virtualenvs #21 Bug Fixes # Fix a conda creation args that 1)uses what the interpreter version is used when no python arg is given, and 2)allows using python version that is not installed yet. #25 v0.3.1 (2021-08-23) # Bug Fixes # Ensure the location is string when calling subprocesses. This is for the compatibility of Python 3.8-. #18 v0.3.0 (2021-07-30) # Bug Fixes # Add support for powershell version>=6.0 as executable name has changed starting with version 6.0. ##10 Fix the activate script of conda env. Now the output should be eval'd rather than source'd #14 v0.2.0 (2021-04-12) # Features & Improvements # Update per the changes of PDM 1.5.0 prerelease. #2 v0.1.1 (2021-03-25) # Features & Improvements # Honor the virtualenv in active for reuse. This however won't store the interpreter path in .pdm.toml . #1","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#v050-2022-02-18","text":"","title":"v0.5.0 (2022-02-18)"},{"location":"changelog/#features-improvements","text":"Update the plugin to support PDM>=1.13.0. #35","title":"Features &amp; Improvements"},{"location":"changelog/#v041-2022-01-29","text":"","title":"v0.4.1 (2022-01-29)"},{"location":"changelog/#bug-fixes","text":"Fix missing argument in the create command #32","title":"Bug Fixes"},{"location":"changelog/#v040-2022-01-03","text":"","title":"v0.4.0 (2022-01-03)"},{"location":"changelog/#features-improvements_1","text":"Support creating venv in project with a config venv.in_project . #20 Add an option to purge created Virtualenvs #21","title":"Features &amp; Improvements"},{"location":"changelog/#bug-fixes_1","text":"Fix a conda creation args that 1)uses what the interpreter version is used when no python arg is given, and 2)allows using python version that is not installed yet. #25","title":"Bug Fixes"},{"location":"changelog/#v031-2021-08-23","text":"","title":"v0.3.1 (2021-08-23)"},{"location":"changelog/#bug-fixes_2","text":"Ensure the location is string when calling subprocesses. This is for the compatibility of Python 3.8-. #18","title":"Bug Fixes"},{"location":"changelog/#v030-2021-07-30","text":"","title":"v0.3.0 (2021-07-30)"},{"location":"changelog/#bug-fixes_3","text":"Add support for powershell version>=6.0 as executable name has changed starting with version 6.0. ##10 Fix the activate script of conda env. Now the output should be eval'd rather than source'd #14","title":"Bug Fixes"},{"location":"changelog/#v020-2021-04-12","text":"","title":"v0.2.0 (2021-04-12)"},{"location":"changelog/#features-improvements_2","text":"Update per the changes of PDM 1.5.0 prerelease. #2","title":"Features &amp; Improvements"},{"location":"changelog/#v011-2021-03-25","text":"","title":"v0.1.1 (2021-03-25)"},{"location":"changelog/#features-improvements_3","text":"Honor the virtualenv in active for reuse. This however won't store the interpreter path in .pdm.toml . #1","title":"Features &amp; Improvements"},{"location":"code_of_conduct/","text":"Everyone interacting in the pdm-venv project's codebases and issue trackers is expected to follow the PSF Code of Conduct .","title":"Code of Conduct"},{"location":"contributing/","text":"Contributing # Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. Environment setup # Nothing easier! Fork and clone the repository: git clone https://github.com/pdm-project/pdm-venv cd pdm-venv We use pdm to manage the project and dependencies, install PDM if it isn't done yet, then: pdm install -d You now have the dependencies installed. You can run the tests with pdm run test [ARGS...] . Test against multiple Python versions # This project uses nox as the test runner. See what sessions are list: nox --list And run the test suite on specified Python versions: nox -s tests-3.8 TIPS nox and pre-commit in the following section are not list in the dev-dependencies of the project, because they can be installed separately to the system and used via the external executable. If you are willing to reproduce the development environment without external dependencies. Run pdm add -d nox pre-commit and the corresponding commands should be prefixed with pdm run as well. Development # As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation If you updated the documentation or the project dependencies: run pdm run doc go to http://localhost:8000 and check that everything looks good Before committing: Make sure you submit a news entry under news/ directory with the name pattern <issue_or_pr_num>.<type>.md where <type> should be one of: bugfix for bug fixes feature for features and improvements doc for documentation improvements remove for deprecations and removals dep for dependencies updates misc for miscellany tasks Install pre-commit and hooks: pre-commit install Then linter task will be run each time when you commit something. Or you can run it manually: pdm run lint If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this. Pull requests guidelines # Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.","title":"Contributing"},{"location":"contributing/#environment-setup","text":"Nothing easier! Fork and clone the repository: git clone https://github.com/pdm-project/pdm-venv cd pdm-venv We use pdm to manage the project and dependencies, install PDM if it isn't done yet, then: pdm install -d You now have the dependencies installed. You can run the tests with pdm run test [ARGS...] .","title":"Environment setup"},{"location":"contributing/#test-against-multiple-python-versions","text":"This project uses nox as the test runner. See what sessions are list: nox --list And run the test suite on specified Python versions: nox -s tests-3.8 TIPS nox and pre-commit in the following section are not list in the dev-dependencies of the project, because they can be installed separately to the system and used via the external executable. If you are willing to reproduce the development environment without external dependencies. Run pdm add -d nox pre-commit and the corresponding commands should be prefixed with pdm run as well.","title":"Test against multiple Python versions"},{"location":"contributing/#development","text":"As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation If you updated the documentation or the project dependencies: run pdm run doc go to http://localhost:8000 and check that everything looks good Before committing: Make sure you submit a news entry under news/ directory with the name pattern <issue_or_pr_num>.<type>.md where <type> should be one of: bugfix for bug fixes feature for features and improvements doc for documentation improvements remove for deprecations and removals dep for dependencies updates misc for miscellany tasks Install pre-commit and hooks: pre-commit install Then linter task will be run each time when you commit something. Or you can run it manually: pdm run lint If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this.","title":"Development"},{"location":"contributing/#pull-requests-guidelines","text":"Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Pull requests guidelines"}]}